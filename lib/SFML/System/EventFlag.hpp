#ifndef SFML_EVENTFLAG_HPP
#define SFML_EVENTFLAG_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML/System/Export.hpp>
#include <SFML/System/NonCopyable.hpp>

#undef  SFML_SYSTEM_API
#define SFML_SYSTEM_API

namespace sf
{
namespace priv
{
    class EventFlagImpl;
}

////////////////////////////////////////////////////////////
/// \brief Blocks concurrent access to shared resources
///        from multiple threads
///
////////////////////////////////////////////////////////////
class SFML_SYSTEM_API EventFlag : NonCopyable
{
public:
    enum {
        FOREVER = 0xFFFFFFFF
    };

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ////////////////////////////////////////////////////////////
    EventFlag(bool state=false);

    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ////////////////////////////////////////////////////////////
    ~EventFlag();

    ////////////////////////////////////////////////////////////
    /// \brief Lock the mutex
    ///
    /// If the mutex is already locked in another thread,
    /// this call will block the execution until the mutex
    /// is released.
    ///
    /// \see unlock
    ///
    ////////////////////////////////////////////////////////////
    void wait(unsigned int timeout=FOREVER);

    ////////////////////////////////////////////////////////////
    /// \brief Unlock the mutex
    ///
    /// \see lock
    ///
    ////////////////////////////////////////////////////////////
    void signal();

private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    priv::EventFlagImpl* m_eventflagImpl; ///< OS-specific implementation
};

} // namespace sf

#endif // SFML_EVENTFLAG_HPP
